name: Build macOS DMG

on:
  push:
    branches: [main, master]
    tags: ['*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  CLIENTID: ${{ secrets.CLIENTID }}
  SPARKLE_PUBLIC_KEY: ${{ secrets.SPARKLE_PUBLIC_KEY }}

jobs:
  build:
    runs-on: macos-15
    strategy:
      matrix:
        arch: [arm64, x86_64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: true

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'

      - name: Extract version info
        id: version
        run: |
          MARKETING_VERSION=$(awk '/\/\* Release \*\/ = {/,/};/ {if ($0 ~ /MARKETING_VERSION/) print $0}' SwiftCraftLauncher.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //' | sed 's/;//')
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${MARKETING_VERSION}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "marketing_version=$MARKETING_VERSION" >> $GITHUB_OUTPUT

      - name: Replace Info.plist variables (safe)
        run: |
          /usr/libexec/PlistBuddy -c "Set :CLIENTID $CLIENTID" SwiftCraftLauncher/Info.plist
          /usr/libexec/PlistBuddy -c "Set :SPARKLE_PUBLIC_KEY $SPARKLE_PUBLIC_KEY" SwiftCraftLauncher/Info.plist
          echo "✅ Info.plist 变量替换完成"

      - name: Build app for ${{ matrix.arch }}
        run: |
          BUILD_DIR="build_${{ matrix.arch }}"
          xcodebuild -project SwiftCraftLauncher.xcodeproj \
            -scheme SwiftCraftLauncher \
            -configuration Release \
            -destination "platform=macOS,arch=${{ matrix.arch }}" \
            -derivedDataPath "$BUILD_DIR" \
            build

      - name: Upload app bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.arch }}
          path: build_${{ matrix.arch }}/**/*.app
          retention-days: 3

  package:
    runs-on: macos-15
    needs: build
    steps:
      - name: Download app bundles
        uses: actions/download-artifact@v4
        with:
          path: apps

      - name: Create DMG for each arch
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          for arch in arm64 x86_64; do
            APP_PATH=$(find apps/app-$arch -name "*.app" -type d | head -1)
            if [[ -z "$APP_PATH" ]]; then
              echo "❌ 未找到 ${arch} 应用"
              exit 1
            fi
            DMG_NAME="Swift_Craft_Launcher_${arch}_${VERSION}.dmg"
            hdiutil create -volname "Swift Craft Launcher" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_NAME"
            echo "✅ DMG 创建成功: $DMG_NAME"
          done

      - name: Upload DMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DMGs
          path: "*.dmg"
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-15
    needs: package

    steps:
      - name: Download DMG artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display downloaded artifacts
        run: find release-artifacts -type f -name "*.dmg"

      - name: Cache Sparkle
        uses: actions/cache@v4
        with:
          path: sparkle
          key: sparkle-${{ runner.os }}-2.7.1

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'

      - name: Setup Sparkle
        run: |
          SPARKLE_VERSION=2.7.1
          if [[ ! -d sparkle ]]; then
            mkdir sparkle
            curl -L "https://github.com/sparkle-project/Sparkle/releases/download/$SPARKLE_VERSION/Sparkle-$SPARKLE_VERSION.tar.xz" -o sparkle.tar.xz
            tar -xf sparkle.tar.xz -C sparkle --strip-components=1
          fi
          ls sparkle/bin/generate_appcast || exit 1

      - name: Create private key file
        run: |
          echo '${{ secrets.SPARKLE_PRIVATE_KEY }}' > ed25519_priv.pem
          chmod 600 ed25519_priv.pem

      - name: Generate appcasts
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          for arch in arm64 x86_64; do
            DMG=$(find release-artifacts -name "*${arch}*.dmg" | head -1)
            if [[ -z "$DMG" ]]; then
              echo "❌ 未找到 ${arch} DMG"
              exit 1
            fi
            sparkle/bin/generate_appcast \
              --ed-key-file ed25519_priv.pem \
              --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/$VERSION/" \
              -o "appcast-${arch}.xml" "$(dirname "$DMG")"
            echo "✅ ${arch} appcast 生成完成"
          done

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/**/*.dmg
            appcast-arm64.xml
            appcast-x86_64.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
